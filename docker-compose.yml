version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: my_web_project-nginx
    ports:
      - "80:80"
      - "443:443" # HTTPSも考慮する場合
    volumes:
      - ./nginx/conf.d/:/etc/nginx/conf.d/:ro # 各サブドメインのNginx設定をマウント
      - ./app/public:/var/www/html:ro # PHPアプリケーションの公開ディレクトリを読み込み専用でマウント
    depends_on:
      - php # PHP-FPMコンテナに依存

  php:
    build:
      context: ./php # php/Dockerfile を使用
      dockerfile: Dockerfile
    container_name: my_web_project-php
    volumes:
      - ./app:/var/www/html:rw # PHPアプリケーションのソースコードを読み書き可能でマウント
      # 開発中にcomposer installなどを実行するために書き込み権限が必要
      - ./app/composer.json:/var/www/html/composer.json # composer.json もマウント
      - ./php/php.ini:/usr/local/etc/php/php.ini # PHP設定ファイル
    # ports:
    #   - "9000:9000" # PHP-FPMのポート (通常Nginxから内部的にアクセスされるため、ホストに公開不要なことも多い)
    depends_on:
      - mysql # MySQLコンテナに依存
    environment:
      # PHPMailerの環境変数もここに追加できますが、config.phpで管理する方がシンプルです
      # DB_PASSWORDなど、機密情報は.envファイルから読み込むようにする
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # .envから読み込み
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

  mysql:
    image: mysql:8.0
    container_name: my_web_project-mysql
    restart: always
    volumes:
      - my_db_data:/var/lib/mysql # データを永続化
      - ./mysql/my.cnf:/etc/mysql/conf.d/my.cnf:ro # MySQL設定ファイル
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}

volumes:
  my_db_data: # MySQLデータボリューム