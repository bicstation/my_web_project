# docker-compose.yml

version: '3.8'

services:
  nginx:
    build: ./nginx
    container_name: nginx_container
    ports:
      - "80:80"
    volumes:
      # メインアプリケーションのpublicディレクトリへのマウント
      - ./app/public:/var/www/html/public
      # WordPressブログ用のディレクトリへのマウント（Nginxがアクセスするパス）
      - ./wordpress_blog:/var/www/html/blog
      # Nginxの設定ファイルディレクトリへのマウント
      - ./nginx/conf.d:/etc/nginx/conf.d
    depends_on:
      - php
      - mysql
      - phpmyadmin
      - blog_wordpress_service # WordPressサービス名を変更
    networks:
      - app-network

  php:
    build: ./php
    volumes:
      # メインアプリケーションのルートディレクトリへのマウント
      - ./app:/var/www/html
      # WordPressブログ用のディレクトリへのマウント（PHP-FPMがアクセスするパス）
      - ./wordpress_blog:/var/www/html/blog
    environment:
      DB_HOST: ${DB_HOST}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    container_name: my_web_project-mysql-1 # コンテナ名を明示的に指定（推奨）
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # .envのMYSQL_ROOT_PASSWORDを使用
      # WordPressが使用するデータベースとユーザーをMySQLコンテナに明示的に作成させる
      MYSQL_DATABASE: ${WORDPRESS_DB_NAME}
      MYSQL_USER: ${WORDPRESS_DB_USER}
      MYSQL_PASSWORD: ${WORDPRESS_DB_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    ports:
      - "3306:3306"
    networks:
      - app-network

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    environment:
      PMA_HOST: mysql
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # .envのMYSQL_ROOT_PASSWORDを使用
    ports:
      - "8080:80"
    depends_on:
      - mysql
    networks:
      - app-network

  # WordPress サービス
  blog_wordpress_service:
    image: wordpress:latest
    container_name: wordpress_blog_container
    environment:
      WORDPRESS_DB_HOST: mysql:3306
      WORDPRESS_DB_NAME: ${WORDPRESS_DB_NAME} # .envから取得
      WORDPRESS_DB_USER: ${WORDPRESS_DB_USER} # .envから取得
      WORDPRESS_DB_PASSWORD: ${WORDPRESS_DB_PASSWORD} # .envから取得
      WORDPRESS_DEBUG: 1 # デバッグモードを有効にする
    volumes:
      # WordPressのデータが永続化される場所（Docker内部の/var/www/html）
      # ここをホストの./wordpress_blogにマウントすることでNginxやPHPコンテナと共有する
      - ./wordpress_blog:/var/www/html
    depends_on:
      - mysql
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  mysql_data:
  # WordPress専用のボリュームではなく、ホスト側のディレクトリをマウントするように変更
  # wordpress_data: # これは削除、またはコメントアウト
